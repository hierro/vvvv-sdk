<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeapCSharp.NET4.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Leap.Fakes.ShimCircleGesture">
            <summary>Shim type of Leap.CircleGesture</summary>
        </member>
        <member name="M:Leap.Fakes.ShimCircleGesture.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimCircleGesture.#ctor(Leap.CircleGesture)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimCircleGesture.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimCircleGesture.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimCircleGesture.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.CenterGet">
            <summary>Sets the shim of CircleGesture.get_Center()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.ClassType">
            <summary>Sets the shim of CircleGesture.ClassType()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.Constructor">
            <summary>Sets the shim of CircleGesture.CircleGesture()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.ConstructorGesture">
            <summary>Sets the shim of CircleGesture.CircleGesture(Gesture rhs)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.ConstructorIntPtrBoolean">
            <summary>Sets the shim of CircleGesture.CircleGesture(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.Dispose">
            <summary>Sets the shim of CircleGesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.NormalGet">
            <summary>Sets the shim of CircleGesture.get_Normal()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.PointableGet">
            <summary>Sets the shim of CircleGesture.get_Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.ProgressGet">
            <summary>Sets the shim of CircleGesture.get_Progress()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.RadiusGet">
            <summary>Sets the shim of CircleGesture.get_Radius()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.getCPtrCircleGesture">
            <summary>Sets the shim of CircleGesture.getCPtr(CircleGesture obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimCircleGesture.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.AllInstances.CenterGet">
            <summary>Sets the shim of CircleGesture.get_Center()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.AllInstances.Dispose">
            <summary>Sets the shim of CircleGesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.AllInstances.NormalGet">
            <summary>Sets the shim of CircleGesture.get_Normal()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.AllInstances.PointableGet">
            <summary>Sets the shim of CircleGesture.get_Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.AllInstances.ProgressGet">
            <summary>Sets the shim of CircleGesture.get_Progress()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimCircleGesture.AllInstances.RadiusGet">
            <summary>Sets the shim of CircleGesture.get_Radius()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimConfig">
            <summary>Shim type of Leap.Config</summary>
        </member>
        <member name="M:Leap.Fakes.ShimConfig.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimConfig.#ctor(Leap.Config)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimConfig.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimConfig.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimConfig.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.Constructor">
            <summary>Sets the shim of Config.Config()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Config.Config(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.Dispose">
            <summary>Sets the shim of Config.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.GetBoolString">
            <summary>Sets the shim of Config.GetBool(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.GetFloatString">
            <summary>Sets the shim of Config.GetFloat(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.GetInt32String">
            <summary>Sets the shim of Config.GetInt32(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.GetStringString">
            <summary>Sets the shim of Config.GetString(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.Save">
            <summary>Sets the shim of Config.Save()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.SetBoolStringBoolean">
            <summary>Sets the shim of Config.SetBool(String key, Boolean value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.SetFloatStringSingle">
            <summary>Sets the shim of Config.SetFloat(String key, Single value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.SetInt32StringInt32">
            <summary>Sets the shim of Config.SetInt32(String key, Int32 value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.SetStringStringString">
            <summary>Sets the shim of Config.SetString(String key, String value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.TypeString">
            <summary>Sets the shim of Config.Type(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.getCPtrConfig">
            <summary>Sets the shim of Config.getCPtr(Config obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimConfig.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.Dispose">
            <summary>Sets the shim of Config.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.GetBoolString">
            <summary>Sets the shim of Config.GetBool(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.GetFloatString">
            <summary>Sets the shim of Config.GetFloat(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.GetInt32String">
            <summary>Sets the shim of Config.GetInt32(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.GetStringString">
            <summary>Sets the shim of Config.GetString(String key)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.Save">
            <summary>Sets the shim of Config.Save()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.SetBoolStringBoolean">
            <summary>Sets the shim of Config.SetBool(String key, Boolean value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.SetFloatStringSingle">
            <summary>Sets the shim of Config.SetFloat(String key, Single value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.SetInt32StringInt32">
            <summary>Sets the shim of Config.SetInt32(String key, Int32 value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.SetStringStringString">
            <summary>Sets the shim of Config.SetString(String key, String value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimConfig.AllInstances.TypeString">
            <summary>Sets the shim of Config.Type(String key)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimController">
            <summary>Shim type of Leap.Controller</summary>
        </member>
        <member name="M:Leap.Fakes.ShimController.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimController.#ctor(Leap.Controller)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimController.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimController.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimController.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AddListenerListener">
            <summary>Sets the shim of Controller.AddListener(Listener listener)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.CalibratedScreensGet">
            <summary>Sets the shim of Controller.get_CalibratedScreens()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.ConfigGet">
            <summary>Sets the shim of Controller.get_Config()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.Constructor">
            <summary>Sets the shim of Controller.Controller()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Controller.Controller(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.ConstructorListener">
            <summary>Sets the shim of Controller.Controller(Listener listener)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.DevicesGet">
            <summary>Sets the shim of Controller.get_Devices()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.Dispose">
            <summary>Sets the shim of Controller.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.EnableGestureGestureGestureType">
            <summary>Sets the shim of Controller.EnableGesture(GestureType type)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.EnableGestureGestureGestureTypeBoolean">
            <summary>Sets the shim of Controller.EnableGesture(GestureType type, Boolean enable)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.Frame">
            <summary>Sets the shim of Controller.Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.FrameInt32">
            <summary>Sets the shim of Controller.Frame(Int32 history)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.HasFocusGet">
            <summary>Sets the shim of Controller.get_HasFocus()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.IsConnectedGet">
            <summary>Sets the shim of Controller.get_IsConnected()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.IsGestureEnabledGestureGestureType">
            <summary>Sets the shim of Controller.IsGestureEnabled(GestureType type)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.LocatedScreensGet">
            <summary>Sets the shim of Controller.get_LocatedScreens()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.PolicyFlagsGet">
            <summary>Sets the shim of Controller.get_PolicyFlags()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.RemoveListenerListener">
            <summary>Sets the shim of Controller.RemoveListener(Listener listener)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.SetPolicyFlagsControllerPolicyFlag">
            <summary>Sets the shim of Controller.SetPolicyFlags(PolicyFlag flags)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.getCPtrController">
            <summary>Sets the shim of Controller.getCPtr(Controller obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimController.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.AddListenerListener">
            <summary>Sets the shim of Controller.AddListener(Listener listener)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.CalibratedScreensGet">
            <summary>Sets the shim of Controller.get_CalibratedScreens()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.ConfigGet">
            <summary>Sets the shim of Controller.get_Config()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.DevicesGet">
            <summary>Sets the shim of Controller.get_Devices()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.Dispose">
            <summary>Sets the shim of Controller.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.EnableGestureGestureGestureType">
            <summary>Sets the shim of Controller.EnableGesture(GestureType type)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.EnableGestureGestureGestureTypeBoolean">
            <summary>Sets the shim of Controller.EnableGesture(GestureType type, Boolean enable)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.Frame">
            <summary>Sets the shim of Controller.Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.FrameInt32">
            <summary>Sets the shim of Controller.Frame(Int32 history)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.HasFocusGet">
            <summary>Sets the shim of Controller.get_HasFocus()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.IsConnectedGet">
            <summary>Sets the shim of Controller.get_IsConnected()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.IsGestureEnabledGestureGestureType">
            <summary>Sets the shim of Controller.IsGestureEnabled(GestureType type)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.LocatedScreensGet">
            <summary>Sets the shim of Controller.get_LocatedScreens()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.PolicyFlagsGet">
            <summary>Sets the shim of Controller.get_PolicyFlags()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.RemoveListenerListener">
            <summary>Sets the shim of Controller.RemoveListener(Listener listener)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimController.AllInstances.SetPolicyFlagsControllerPolicyFlag">
            <summary>Sets the shim of Controller.SetPolicyFlags(PolicyFlag flags)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimDevice">
            <summary>Shim type of Leap.Device</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDevice.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDevice.#ctor(Leap.Device)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDevice.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDevice.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDevice.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.Constructor">
            <summary>Sets the shim of Device.Device()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Device.Device(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.Dispose">
            <summary>Sets the shim of Device.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.DistanceToBoundaryVector">
            <summary>Sets the shim of Device.DistanceToBoundary(Vector position)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.EqualsDevice">
            <summary>Sets the shim of Device.Equals(Device arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.HorizontalViewAngleGet">
            <summary>Sets the shim of Device.get_HorizontalViewAngle()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.InvalidGet">
            <summary>Sets the shim of Device.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.IsValidGet">
            <summary>Sets the shim of Device.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.RangeGet">
            <summary>Sets the shim of Device.get_Range()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.ToString">
            <summary>Sets the shim of Device.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.VerticalViewAngleGet">
            <summary>Sets the shim of Device.get_VerticalViewAngle()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.getCPtrDevice">
            <summary>Sets the shim of Device.getCPtr(Device obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimDevice.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.AllInstances.Dispose">
            <summary>Sets the shim of Device.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.AllInstances.DistanceToBoundaryVector">
            <summary>Sets the shim of Device.DistanceToBoundary(Vector position)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.AllInstances.EqualsDevice">
            <summary>Sets the shim of Device.Equals(Device arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.AllInstances.HorizontalViewAngleGet">
            <summary>Sets the shim of Device.get_HorizontalViewAngle()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.AllInstances.IsValidGet">
            <summary>Sets the shim of Device.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.AllInstances.RangeGet">
            <summary>Sets the shim of Device.get_Range()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.AllInstances.ToString01">
            <summary>Sets the shim of Device.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDevice.AllInstances.VerticalViewAngleGet">
            <summary>Sets the shim of Device.get_VerticalViewAngle()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimDeviceList">
            <summary>Shim type of Leap.DeviceList</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDeviceList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDeviceList.#ctor(Leap.DeviceList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDeviceList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDeviceList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDeviceList.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDeviceList.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimDeviceList.Bind(System.Collections.Generic.IEnumerable{Leap.Device})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AppendDeviceList">
            <summary>Sets the shim of DeviceList.Append(DeviceList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.Constructor">
            <summary>Sets the shim of DeviceList.DeviceList()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.ConstructorIntPtrBoolean">
            <summary>Sets the shim of DeviceList.DeviceList(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.CountGet">
            <summary>Sets the shim of DeviceList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.Dispose">
            <summary>Sets the shim of DeviceList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.GetEnumerator">
            <summary>Sets the shim of DeviceList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.IsEmptyGet">
            <summary>Sets the shim of DeviceList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.ItemGetInt32">
            <summary>Sets the shim of DeviceList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of DeviceList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList._operator_getInt32">
            <summary>Sets the shim of DeviceList._operator_get(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.getCPtrDeviceList">
            <summary>Sets the shim of DeviceList.getCPtr(DeviceList obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimDeviceList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AllInstances.AppendDeviceList">
            <summary>Sets the shim of DeviceList.Append(DeviceList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AllInstances.CountGet">
            <summary>Sets the shim of DeviceList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AllInstances.Dispose">
            <summary>Sets the shim of DeviceList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AllInstances.GetEnumerator">
            <summary>Sets the shim of DeviceList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AllInstances.IsEmptyGet">
            <summary>Sets the shim of DeviceList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AllInstances.ItemGetInt32">
            <summary>Sets the shim of DeviceList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of DeviceList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimDeviceList.AllInstances._operator_getInt32">
            <summary>Sets the shim of DeviceList._operator_get(Int32 index)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimFinger">
            <summary>Shim type of Leap.Finger</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFinger.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFinger.#ctor(Leap.Finger)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFinger.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFinger.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFinger.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.Constructor">
            <summary>Sets the shim of Finger.Finger()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Finger.Finger(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.ConstructorPointable">
            <summary>Sets the shim of Finger.Finger(Pointable arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.Dispose">
            <summary>Sets the shim of Finger.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.InvalidGet">
            <summary>Sets the shim of Finger.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.ToString">
            <summary>Sets the shim of Finger.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.getCPtrFinger">
            <summary>Sets the shim of Finger.getCPtr(Finger obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimFinger.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.AllInstances.Dispose">
            <summary>Sets the shim of Finger.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFinger.AllInstances.ToString01">
            <summary>Sets the shim of Finger.ToString()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimFingerList">
            <summary>Shim type of Leap.FingerList</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFingerList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFingerList.#ctor(Leap.FingerList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFingerList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFingerList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFingerList.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFingerList.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFingerList.Bind(System.Collections.Generic.IEnumerable{Leap.Finger})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AppendFingerList">
            <summary>Sets the shim of FingerList.Append(FingerList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.Constructor">
            <summary>Sets the shim of FingerList.FingerList()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.ConstructorIntPtrBoolean">
            <summary>Sets the shim of FingerList.FingerList(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.CountGet">
            <summary>Sets the shim of FingerList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.Dispose">
            <summary>Sets the shim of FingerList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.EmptyGet">
            <summary>Sets the shim of FingerList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.FrontmostGet">
            <summary>Sets the shim of FingerList.get_Frontmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.GetEnumerator">
            <summary>Sets the shim of FingerList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.IsEmptyGet">
            <summary>Sets the shim of FingerList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.ItemGetInt32">
            <summary>Sets the shim of FingerList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.LeftmostGet">
            <summary>Sets the shim of FingerList.get_Leftmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.RightmostGet">
            <summary>Sets the shim of FingerList.get_Rightmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of FingerList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList._operator_getInt32">
            <summary>Sets the shim of FingerList._operator_get(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.getCPtrFingerList">
            <summary>Sets the shim of FingerList.getCPtr(FingerList obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimFingerList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.AppendFingerList">
            <summary>Sets the shim of FingerList.Append(FingerList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.CountGet">
            <summary>Sets the shim of FingerList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.Dispose">
            <summary>Sets the shim of FingerList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.EmptyGet">
            <summary>Sets the shim of FingerList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.FrontmostGet">
            <summary>Sets the shim of FingerList.get_Frontmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.GetEnumerator">
            <summary>Sets the shim of FingerList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.IsEmptyGet">
            <summary>Sets the shim of FingerList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.ItemGetInt32">
            <summary>Sets the shim of FingerList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.LeftmostGet">
            <summary>Sets the shim of FingerList.get_Leftmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.RightmostGet">
            <summary>Sets the shim of FingerList.get_Rightmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of FingerList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFingerList.AllInstances._operator_getInt32">
            <summary>Sets the shim of FingerList._operator_get(Int32 index)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimFrame">
            <summary>Shim type of Leap.Frame</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFrame.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFrame.#ctor(Leap.Frame)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFrame.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFrame.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimFrame.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.Constructor">
            <summary>Sets the shim of Frame.Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Frame.Frame(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.CurrentFramesPerSecondGet">
            <summary>Sets the shim of Frame.get_CurrentFramesPerSecond()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.Dispose">
            <summary>Sets the shim of Frame.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.EqualsFrame">
            <summary>Sets the shim of Frame.Equals(Frame arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.FingerInt32">
            <summary>Sets the shim of Frame.Finger(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.FingersGet">
            <summary>Sets the shim of Frame.get_Fingers()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.GestureInt32">
            <summary>Sets the shim of Frame.Gesture(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.Gestures">
            <summary>Sets the shim of Frame.Gestures()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.GesturesFrame">
            <summary>Sets the shim of Frame.Gestures(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.HandInt32">
            <summary>Sets the shim of Frame.Hand(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.HandsGet">
            <summary>Sets the shim of Frame.get_Hands()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.IdGet">
            <summary>Sets the shim of Frame.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.InteractionBoxGet">
            <summary>Sets the shim of Frame.get_InteractionBox()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.InvalidGet">
            <summary>Sets the shim of Frame.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.IsValidGet">
            <summary>Sets the shim of Frame.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.PointableInt32">
            <summary>Sets the shim of Frame.Pointable(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.PointablesGet">
            <summary>Sets the shim of Frame.get_Pointables()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.RotationAngleFrame">
            <summary>Sets the shim of Frame.RotationAngle(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.RotationAngleFrameVector">
            <summary>Sets the shim of Frame.RotationAngle(Frame sinceFrame, Vector axis)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.RotationAxisFrame">
            <summary>Sets the shim of Frame.RotationAxis(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.RotationMatrixFrame">
            <summary>Sets the shim of Frame.RotationMatrix(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.RotationProbabilityFrame">
            <summary>Sets the shim of Frame.RotationProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.ScaleFactorFrame">
            <summary>Sets the shim of Frame.ScaleFactor(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.ScaleProbabilityFrame">
            <summary>Sets the shim of Frame.ScaleProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.TimestampGet">
            <summary>Sets the shim of Frame.get_Timestamp()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.ToString">
            <summary>Sets the shim of Frame.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.ToolInt32">
            <summary>Sets the shim of Frame.Tool(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.ToolsGet">
            <summary>Sets the shim of Frame.get_Tools()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.TranslationFrame">
            <summary>Sets the shim of Frame.Translation(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.TranslationProbabilityFrame">
            <summary>Sets the shim of Frame.TranslationProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.getCPtrFrame">
            <summary>Sets the shim of Frame.getCPtr(Frame obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimFrame.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.CurrentFramesPerSecondGet">
            <summary>Sets the shim of Frame.get_CurrentFramesPerSecond()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.Dispose">
            <summary>Sets the shim of Frame.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.EqualsFrame">
            <summary>Sets the shim of Frame.Equals(Frame arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.FingerInt32">
            <summary>Sets the shim of Frame.Finger(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.FingersGet">
            <summary>Sets the shim of Frame.get_Fingers()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.GestureInt32">
            <summary>Sets the shim of Frame.Gesture(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.Gestures">
            <summary>Sets the shim of Frame.Gestures()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.GesturesFrame">
            <summary>Sets the shim of Frame.Gestures(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.HandInt32">
            <summary>Sets the shim of Frame.Hand(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.HandsGet">
            <summary>Sets the shim of Frame.get_Hands()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.IdGet">
            <summary>Sets the shim of Frame.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.InteractionBoxGet">
            <summary>Sets the shim of Frame.get_InteractionBox()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.IsValidGet">
            <summary>Sets the shim of Frame.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.PointableInt32">
            <summary>Sets the shim of Frame.Pointable(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.PointablesGet">
            <summary>Sets the shim of Frame.get_Pointables()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.RotationAngleFrame">
            <summary>Sets the shim of Frame.RotationAngle(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.RotationAngleFrameVector">
            <summary>Sets the shim of Frame.RotationAngle(Frame sinceFrame, Vector axis)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.RotationAxisFrame">
            <summary>Sets the shim of Frame.RotationAxis(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.RotationMatrixFrame">
            <summary>Sets the shim of Frame.RotationMatrix(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.RotationProbabilityFrame">
            <summary>Sets the shim of Frame.RotationProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.ScaleFactorFrame">
            <summary>Sets the shim of Frame.ScaleFactor(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.ScaleProbabilityFrame">
            <summary>Sets the shim of Frame.ScaleProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.TimestampGet">
            <summary>Sets the shim of Frame.get_Timestamp()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.ToString01">
            <summary>Sets the shim of Frame.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.ToolInt32">
            <summary>Sets the shim of Frame.Tool(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.ToolsGet">
            <summary>Sets the shim of Frame.get_Tools()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.TranslationFrame">
            <summary>Sets the shim of Frame.Translation(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimFrame.AllInstances.TranslationProbabilityFrame">
            <summary>Sets the shim of Frame.TranslationProbability(Frame sinceFrame)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimGesture">
            <summary>Shim type of Leap.Gesture</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGesture.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGesture.#ctor(Leap.Gesture)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGesture.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGesture.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGesture.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.Constructor">
            <summary>Sets the shim of Gesture.Gesture()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.ConstructorGesture">
            <summary>Sets the shim of Gesture.Gesture(Gesture rhs)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Gesture.Gesture(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.Dispose">
            <summary>Sets the shim of Gesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.DurationGet">
            <summary>Sets the shim of Gesture.get_Duration()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.DurationSecondsGet">
            <summary>Sets the shim of Gesture.get_DurationSeconds()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.EqualsGesture">
            <summary>Sets the shim of Gesture.Equals(Gesture rhs)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.FrameGet">
            <summary>Sets the shim of Gesture.get_Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.HandsGet">
            <summary>Sets the shim of Gesture.get_Hands()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.IdGet">
            <summary>Sets the shim of Gesture.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.InvalidGet">
            <summary>Sets the shim of Gesture.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.IsValidGet">
            <summary>Sets the shim of Gesture.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.PointablesGet">
            <summary>Sets the shim of Gesture.get_Pointables()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.StateGet">
            <summary>Sets the shim of Gesture.get_State()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.ToString">
            <summary>Sets the shim of Gesture.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.TypeGet">
            <summary>Sets the shim of Gesture.get_Type()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.getCPtrGesture">
            <summary>Sets the shim of Gesture.getCPtr(Gesture obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimGesture.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.Dispose">
            <summary>Sets the shim of Gesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.DurationGet">
            <summary>Sets the shim of Gesture.get_Duration()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.DurationSecondsGet">
            <summary>Sets the shim of Gesture.get_DurationSeconds()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.EqualsGesture">
            <summary>Sets the shim of Gesture.Equals(Gesture rhs)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.FrameGet">
            <summary>Sets the shim of Gesture.get_Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.HandsGet">
            <summary>Sets the shim of Gesture.get_Hands()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.IdGet">
            <summary>Sets the shim of Gesture.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.IsValidGet">
            <summary>Sets the shim of Gesture.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.PointablesGet">
            <summary>Sets the shim of Gesture.get_Pointables()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.StateGet">
            <summary>Sets the shim of Gesture.get_State()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.ToString01">
            <summary>Sets the shim of Gesture.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGesture.AllInstances.TypeGet">
            <summary>Sets the shim of Gesture.get_Type()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimGestureList">
            <summary>Shim type of Leap.GestureList</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGestureList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGestureList.#ctor(Leap.GestureList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGestureList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGestureList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGestureList.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGestureList.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimGestureList.Bind(System.Collections.Generic.IEnumerable{Leap.Gesture})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AppendGestureList">
            <summary>Sets the shim of GestureList.Append(GestureList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.Constructor">
            <summary>Sets the shim of GestureList.GestureList()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.ConstructorIntPtrBoolean">
            <summary>Sets the shim of GestureList.GestureList(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.CountGet">
            <summary>Sets the shim of GestureList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.Dispose">
            <summary>Sets the shim of GestureList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.EmptyGet">
            <summary>Sets the shim of GestureList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.GetEnumerator">
            <summary>Sets the shim of GestureList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.IsEmptyGet">
            <summary>Sets the shim of GestureList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.ItemGetInt32">
            <summary>Sets the shim of GestureList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of GestureList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList._operator_getInt32">
            <summary>Sets the shim of GestureList._operator_get(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.getCPtrGestureList">
            <summary>Sets the shim of GestureList.getCPtr(GestureList obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimGestureList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances.AppendGestureList">
            <summary>Sets the shim of GestureList.Append(GestureList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances.CountGet">
            <summary>Sets the shim of GestureList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances.Dispose">
            <summary>Sets the shim of GestureList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances.EmptyGet">
            <summary>Sets the shim of GestureList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances.GetEnumerator">
            <summary>Sets the shim of GestureList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances.IsEmptyGet">
            <summary>Sets the shim of GestureList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances.ItemGetInt32">
            <summary>Sets the shim of GestureList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of GestureList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimGestureList.AllInstances._operator_getInt32">
            <summary>Sets the shim of GestureList._operator_get(Int32 index)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimHand">
            <summary>Shim type of Leap.Hand</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHand.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHand.#ctor(Leap.Hand)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHand.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHand.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHand.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.Constructor">
            <summary>Sets the shim of Hand.Hand()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Hand.Hand(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.DirectionGet">
            <summary>Sets the shim of Hand.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.Dispose">
            <summary>Sets the shim of Hand.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.EqualsHand">
            <summary>Sets the shim of Hand.Equals(Hand arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.FingerInt32">
            <summary>Sets the shim of Hand.Finger(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.FingersGet">
            <summary>Sets the shim of Hand.get_Fingers()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.FrameGet">
            <summary>Sets the shim of Hand.get_Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.IdGet">
            <summary>Sets the shim of Hand.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.InvalidGet">
            <summary>Sets the shim of Hand.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.IsValidGet">
            <summary>Sets the shim of Hand.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.PalmNormalGet">
            <summary>Sets the shim of Hand.get_PalmNormal()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.PalmPositionGet">
            <summary>Sets the shim of Hand.get_PalmPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.PalmVelocityGet">
            <summary>Sets the shim of Hand.get_PalmVelocity()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.PointableInt32">
            <summary>Sets the shim of Hand.Pointable(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.PointablesGet">
            <summary>Sets the shim of Hand.get_Pointables()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.RotationAngleFrame">
            <summary>Sets the shim of Hand.RotationAngle(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.RotationAngleFrameVector">
            <summary>Sets the shim of Hand.RotationAngle(Frame sinceFrame, Vector axis)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.RotationAxisFrame">
            <summary>Sets the shim of Hand.RotationAxis(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.RotationMatrixFrame">
            <summary>Sets the shim of Hand.RotationMatrix(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.RotationProbabilityFrame">
            <summary>Sets the shim of Hand.RotationProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.ScaleFactorFrame">
            <summary>Sets the shim of Hand.ScaleFactor(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.ScaleProbabilityFrame">
            <summary>Sets the shim of Hand.ScaleProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.SphereCenterGet">
            <summary>Sets the shim of Hand.get_SphereCenter()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.SphereRadiusGet">
            <summary>Sets the shim of Hand.get_SphereRadius()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.StabilizedPalmPositionGet">
            <summary>Sets the shim of Hand.get_StabilizedPalmPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.TimeVisibleGet">
            <summary>Sets the shim of Hand.get_TimeVisible()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.ToString">
            <summary>Sets the shim of Hand.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.ToolInt32">
            <summary>Sets the shim of Hand.Tool(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.ToolsGet">
            <summary>Sets the shim of Hand.get_Tools()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.TranslationFrame">
            <summary>Sets the shim of Hand.Translation(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.TranslationProbabilityFrame">
            <summary>Sets the shim of Hand.TranslationProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.getCPtrHand">
            <summary>Sets the shim of Hand.getCPtr(Hand obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimHand.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.DirectionGet">
            <summary>Sets the shim of Hand.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.Dispose">
            <summary>Sets the shim of Hand.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.EqualsHand">
            <summary>Sets the shim of Hand.Equals(Hand arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.FingerInt32">
            <summary>Sets the shim of Hand.Finger(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.FingersGet">
            <summary>Sets the shim of Hand.get_Fingers()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.FrameGet">
            <summary>Sets the shim of Hand.get_Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.IdGet">
            <summary>Sets the shim of Hand.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.IsValidGet">
            <summary>Sets the shim of Hand.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.PalmNormalGet">
            <summary>Sets the shim of Hand.get_PalmNormal()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.PalmPositionGet">
            <summary>Sets the shim of Hand.get_PalmPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.PalmVelocityGet">
            <summary>Sets the shim of Hand.get_PalmVelocity()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.PointableInt32">
            <summary>Sets the shim of Hand.Pointable(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.PointablesGet">
            <summary>Sets the shim of Hand.get_Pointables()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.RotationAngleFrame">
            <summary>Sets the shim of Hand.RotationAngle(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.RotationAngleFrameVector">
            <summary>Sets the shim of Hand.RotationAngle(Frame sinceFrame, Vector axis)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.RotationAxisFrame">
            <summary>Sets the shim of Hand.RotationAxis(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.RotationMatrixFrame">
            <summary>Sets the shim of Hand.RotationMatrix(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.RotationProbabilityFrame">
            <summary>Sets the shim of Hand.RotationProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.ScaleFactorFrame">
            <summary>Sets the shim of Hand.ScaleFactor(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.ScaleProbabilityFrame">
            <summary>Sets the shim of Hand.ScaleProbability(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.SphereCenterGet">
            <summary>Sets the shim of Hand.get_SphereCenter()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.SphereRadiusGet">
            <summary>Sets the shim of Hand.get_SphereRadius()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.StabilizedPalmPositionGet">
            <summary>Sets the shim of Hand.get_StabilizedPalmPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.TimeVisibleGet">
            <summary>Sets the shim of Hand.get_TimeVisible()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.ToString01">
            <summary>Sets the shim of Hand.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.ToolInt32">
            <summary>Sets the shim of Hand.Tool(Int32 id)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.ToolsGet">
            <summary>Sets the shim of Hand.get_Tools()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.TranslationFrame">
            <summary>Sets the shim of Hand.Translation(Frame sinceFrame)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHand.AllInstances.TranslationProbabilityFrame">
            <summary>Sets the shim of Hand.TranslationProbability(Frame sinceFrame)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimHandList">
            <summary>Shim type of Leap.HandList</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHandList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHandList.#ctor(Leap.HandList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHandList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHandList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHandList.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHandList.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimHandList.Bind(System.Collections.Generic.IEnumerable{Leap.Hand})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AppendHandList">
            <summary>Sets the shim of HandList.Append(HandList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.Constructor">
            <summary>Sets the shim of HandList.HandList()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.ConstructorIntPtrBoolean">
            <summary>Sets the shim of HandList.HandList(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.CountGet">
            <summary>Sets the shim of HandList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.Dispose">
            <summary>Sets the shim of HandList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.EmptyGet">
            <summary>Sets the shim of HandList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.FrontmostGet">
            <summary>Sets the shim of HandList.get_Frontmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.GetEnumerator">
            <summary>Sets the shim of HandList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.IsEmptyGet">
            <summary>Sets the shim of HandList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.ItemGetInt32">
            <summary>Sets the shim of HandList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.LeftmostGet">
            <summary>Sets the shim of HandList.get_Leftmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.RightmostGet">
            <summary>Sets the shim of HandList.get_Rightmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of HandList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList._operator_getInt32">
            <summary>Sets the shim of HandList._operator_get(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.getCPtrHandList">
            <summary>Sets the shim of HandList.getCPtr(HandList obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimHandList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.AppendHandList">
            <summary>Sets the shim of HandList.Append(HandList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.CountGet">
            <summary>Sets the shim of HandList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.Dispose">
            <summary>Sets the shim of HandList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.EmptyGet">
            <summary>Sets the shim of HandList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.FrontmostGet">
            <summary>Sets the shim of HandList.get_Frontmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.GetEnumerator">
            <summary>Sets the shim of HandList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.IsEmptyGet">
            <summary>Sets the shim of HandList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.ItemGetInt32">
            <summary>Sets the shim of HandList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.LeftmostGet">
            <summary>Sets the shim of HandList.get_Leftmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.RightmostGet">
            <summary>Sets the shim of HandList.get_Rightmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of HandList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimHandList.AllInstances._operator_getInt32">
            <summary>Sets the shim of HandList._operator_get(Int32 index)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimInteractionBox">
            <summary>Shim type of Leap.InteractionBox</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInteractionBox.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInteractionBox.#ctor(Leap.InteractionBox)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInteractionBox.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInteractionBox.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInteractionBox.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.CenterGet">
            <summary>Sets the shim of InteractionBox.get_Center()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.Constructor">
            <summary>Sets the shim of InteractionBox.InteractionBox()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.ConstructorIntPtrBoolean">
            <summary>Sets the shim of InteractionBox.InteractionBox(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.DenormalizePointVector">
            <summary>Sets the shim of InteractionBox.DenormalizePoint(Vector normalizedPosition)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.DepthGet">
            <summary>Sets the shim of InteractionBox.get_Depth()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.Dispose">
            <summary>Sets the shim of InteractionBox.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.EqualsInteractionBox">
            <summary>Sets the shim of InteractionBox.Equals(InteractionBox arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.HeightGet">
            <summary>Sets the shim of InteractionBox.get_Height()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.InvalidGet">
            <summary>Sets the shim of InteractionBox.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.IsValidGet">
            <summary>Sets the shim of InteractionBox.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.NormalizePointVector">
            <summary>Sets the shim of InteractionBox.NormalizePoint(Vector position)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.NormalizePointVectorBoolean">
            <summary>Sets the shim of InteractionBox.NormalizePoint(Vector position, Boolean clamp)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.ToString">
            <summary>Sets the shim of InteractionBox.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.WidthGet">
            <summary>Sets the shim of InteractionBox.get_Width()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.getCPtrInteractionBox">
            <summary>Sets the shim of InteractionBox.getCPtr(InteractionBox obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimInteractionBox.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.CenterGet">
            <summary>Sets the shim of InteractionBox.get_Center()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.DenormalizePointVector">
            <summary>Sets the shim of InteractionBox.DenormalizePoint(Vector normalizedPosition)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.DepthGet">
            <summary>Sets the shim of InteractionBox.get_Depth()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.Dispose">
            <summary>Sets the shim of InteractionBox.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.EqualsInteractionBox">
            <summary>Sets the shim of InteractionBox.Equals(InteractionBox arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.HeightGet">
            <summary>Sets the shim of InteractionBox.get_Height()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.IsValidGet">
            <summary>Sets the shim of InteractionBox.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.NormalizePointVector">
            <summary>Sets the shim of InteractionBox.NormalizePoint(Vector position)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.NormalizePointVectorBoolean">
            <summary>Sets the shim of InteractionBox.NormalizePoint(Vector position, Boolean clamp)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.ToString01">
            <summary>Sets the shim of InteractionBox.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInteractionBox.AllInstances.WidthGet">
            <summary>Sets the shim of InteractionBox.get_Width()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimInterface">
            <summary>Shim type of Leap.Interface</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInterface.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInterface.#ctor(Leap.Interface)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInterface.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInterface.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimInterface.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInterface.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInterface.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Interface.Interface(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInterface.Dispose">
            <summary>Sets the shim of Interface.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInterface.getCPtrInterface">
            <summary>Sets the shim of Interface.getCPtr(Interface obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimInterface.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimInterface.AllInstances.Dispose">
            <summary>Sets the shim of Interface.Dispose()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimKeyTapGesture">
            <summary>Shim type of Leap.KeyTapGesture</summary>
        </member>
        <member name="M:Leap.Fakes.ShimKeyTapGesture.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimKeyTapGesture.#ctor(Leap.KeyTapGesture)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimKeyTapGesture.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimKeyTapGesture.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimKeyTapGesture.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.ClassType">
            <summary>Sets the shim of KeyTapGesture.ClassType()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.Constructor">
            <summary>Sets the shim of KeyTapGesture.KeyTapGesture()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.ConstructorGesture">
            <summary>Sets the shim of KeyTapGesture.KeyTapGesture(Gesture rhs)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.ConstructorIntPtrBoolean">
            <summary>Sets the shim of KeyTapGesture.KeyTapGesture(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.DirectionGet">
            <summary>Sets the shim of KeyTapGesture.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.Dispose">
            <summary>Sets the shim of KeyTapGesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.PointableGet">
            <summary>Sets the shim of KeyTapGesture.get_Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.PositionGet">
            <summary>Sets the shim of KeyTapGesture.get_Position()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.ProgressGet">
            <summary>Sets the shim of KeyTapGesture.get_Progress()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.getCPtrKeyTapGesture">
            <summary>Sets the shim of KeyTapGesture.getCPtr(KeyTapGesture obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimKeyTapGesture.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.AllInstances.DirectionGet">
            <summary>Sets the shim of KeyTapGesture.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.AllInstances.Dispose">
            <summary>Sets the shim of KeyTapGesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.AllInstances.PointableGet">
            <summary>Sets the shim of KeyTapGesture.get_Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.AllInstances.PositionGet">
            <summary>Sets the shim of KeyTapGesture.get_Position()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimKeyTapGesture.AllInstances.ProgressGet">
            <summary>Sets the shim of KeyTapGesture.get_Progress()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimLeap">
            <summary>Shim type of Leap.Leap</summary>
        </member>
        <member name="M:Leap.Fakes.ShimLeap.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimLeap.#ctor(Leap.Leap)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimLeap.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimLeap.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimLeap.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimLeap.Constructor">
            <summary>Sets the shim of Leap.Leap()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimLeap.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Leap.Fakes.ShimListener">
            <summary>Shim type of Leap.Listener</summary>
        </member>
        <member name="M:Leap.Fakes.ShimListener.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimListener.#ctor(Leap.Listener)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimListener.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimListener.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimListener.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.Constructor">
            <summary>Sets the shim of Listener.Listener()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Listener.Listener(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.Dispose">
            <summary>Sets the shim of Listener.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.OnConnectController">
            <summary>Sets the shim of Listener.OnConnect(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.OnDisconnectController">
            <summary>Sets the shim of Listener.OnDisconnect(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.OnExitController">
            <summary>Sets the shim of Listener.OnExit(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.OnFocusGainedController">
            <summary>Sets the shim of Listener.OnFocusGained(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.OnFocusLostController">
            <summary>Sets the shim of Listener.OnFocusLost(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.OnFrameController">
            <summary>Sets the shim of Listener.OnFrame(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.OnInitController">
            <summary>Sets the shim of Listener.OnInit(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.StaticConstructor">
            <summary>Sets the shim of Listener.Listener()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDerivedClassHasMethodStringTypeArray">
            <summary>Sets the shim of Listener.SwigDerivedClassHasMethod(String methodName, Type[] methodTypes)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDirectorConnect">
            <summary>Sets the shim of Listener.SwigDirectorConnect()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDirectorOnConnectIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnConnect(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDirectorOnDisconnectIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnDisconnect(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDirectorOnExitIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnExit(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDirectorOnFocusGainedIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnFocusGained(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDirectorOnFocusLostIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnFocusLost(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDirectorOnFrameIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnFrame(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.SwigDirectorOnInitIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnInit(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.getCPtrListener">
            <summary>Sets the shim of Listener.getCPtr(Listener obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimListener.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.Dispose">
            <summary>Sets the shim of Listener.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.OnConnectController">
            <summary>Sets the shim of Listener.OnConnect(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.OnDisconnectController">
            <summary>Sets the shim of Listener.OnDisconnect(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.OnExitController">
            <summary>Sets the shim of Listener.OnExit(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.OnFocusGainedController">
            <summary>Sets the shim of Listener.OnFocusGained(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.OnFocusLostController">
            <summary>Sets the shim of Listener.OnFocusLost(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.OnFrameController">
            <summary>Sets the shim of Listener.OnFrame(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.OnInitController">
            <summary>Sets the shim of Listener.OnInit(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDerivedClassHasMethodStringTypeArray">
            <summary>Sets the shim of Listener.SwigDerivedClassHasMethod(String methodName, Type[] methodTypes)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDirectorConnect">
            <summary>Sets the shim of Listener.SwigDirectorConnect()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDirectorOnConnectIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnConnect(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDirectorOnDisconnectIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnDisconnect(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDirectorOnExitIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnExit(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDirectorOnFocusGainedIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnFocusGained(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDirectorOnFocusLostIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnFocusLost(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDirectorOnFrameIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnFrame(IntPtr arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimListener.AllInstances.SwigDirectorOnInitIntPtr">
            <summary>Sets the shim of Listener.SwigDirectorOnInit(IntPtr arg0)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimMatrix">
            <summary>Shim type of Leap.Matrix</summary>
        </member>
        <member name="M:Leap.Fakes.ShimMatrix.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimMatrix.#ctor(Leap.Matrix)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimMatrix.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimMatrix.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimMatrix.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.Constructor">
            <summary>Sets the shim of Matrix.Matrix()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Matrix.Matrix(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ConstructorMatrix">
            <summary>Sets the shim of Matrix.Matrix(Matrix other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ConstructorVectorSingle">
            <summary>Sets the shim of Matrix.Matrix(Vector axis, Single angleRadians)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ConstructorVectorSingleVector">
            <summary>Sets the shim of Matrix.Matrix(Vector axis, Single angleRadians, Vector translation)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ConstructorVectorVectorVector">
            <summary>Sets the shim of Matrix.Matrix(Vector _xBasis, Vector _yBasis, Vector _zBasis)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ConstructorVectorVectorVectorVector">
            <summary>Sets the shim of Matrix.Matrix(Vector _xBasis, Vector _yBasis, Vector _zBasis, Vector _origin)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.Dispose">
            <summary>Sets the shim of Matrix.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.EqualsMatrix">
            <summary>Sets the shim of Matrix.Equals(Matrix other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.IdentityGet">
            <summary>Sets the shim of Matrix.get_Identity()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.MultiplyOpMatrixMatrix">
            <summary>Sets the shim of Matrix.op_Multiply(Matrix m1, Matrix m2)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.RigidInverse">
            <summary>Sets the shim of Matrix.RigidInverse()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.SetRotationVectorSingle">
            <summary>Sets the shim of Matrix.SetRotation(Vector axis, Single angleRadians)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ToArray3x3">
            <summary>Sets the shim of Matrix.ToArray3x3()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ToArray3x3DoubleArray">
            <summary>Sets the shim of Matrix.ToArray3x3(Double[] output)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ToArray3x3SingleArray">
            <summary>Sets the shim of Matrix.ToArray3x3(Single[] output)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ToArray4x4">
            <summary>Sets the shim of Matrix.ToArray4x4()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ToArray4x4DoubleArray">
            <summary>Sets the shim of Matrix.ToArray4x4(Double[] output)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ToArray4x4SingleArray">
            <summary>Sets the shim of Matrix.ToArray4x4(Single[] output)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.ToString">
            <summary>Sets the shim of Matrix.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.TransformDirectionVector">
            <summary>Sets the shim of Matrix.TransformDirection(Vector arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.TransformPointVector">
            <summary>Sets the shim of Matrix.TransformPoint(Vector arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix._operator_mulMatrix">
            <summary>Sets the shim of Matrix._operator_mul(Matrix other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.getCPtrMatrix">
            <summary>Sets the shim of Matrix.getCPtr(Matrix obj)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.originGet">
            <summary>Sets the shim of Matrix.get_origin()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.originSetVector">
            <summary>Sets the shim of Matrix.set_origin(Vector value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.xBasisGet">
            <summary>Sets the shim of Matrix.get_xBasis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.xBasisSetVector">
            <summary>Sets the shim of Matrix.set_xBasis(Vector value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.yBasisGet">
            <summary>Sets the shim of Matrix.get_yBasis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.yBasisSetVector">
            <summary>Sets the shim of Matrix.set_yBasis(Vector value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.zBasisGet">
            <summary>Sets the shim of Matrix.get_zBasis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.zBasisSetVector">
            <summary>Sets the shim of Matrix.set_zBasis(Vector value)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimMatrix.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.Dispose">
            <summary>Sets the shim of Matrix.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.EqualsMatrix">
            <summary>Sets the shim of Matrix.Equals(Matrix other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.RigidInverse">
            <summary>Sets the shim of Matrix.RigidInverse()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.SetRotationVectorSingle">
            <summary>Sets the shim of Matrix.SetRotation(Vector axis, Single angleRadians)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.ToArray3x3">
            <summary>Sets the shim of Matrix.ToArray3x3()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.ToArray3x3DoubleArray">
            <summary>Sets the shim of Matrix.ToArray3x3(Double[] output)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.ToArray3x3SingleArray">
            <summary>Sets the shim of Matrix.ToArray3x3(Single[] output)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.ToArray4x4">
            <summary>Sets the shim of Matrix.ToArray4x4()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.ToArray4x4DoubleArray">
            <summary>Sets the shim of Matrix.ToArray4x4(Double[] output)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.ToArray4x4SingleArray">
            <summary>Sets the shim of Matrix.ToArray4x4(Single[] output)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.ToString01">
            <summary>Sets the shim of Matrix.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.TransformDirectionVector">
            <summary>Sets the shim of Matrix.TransformDirection(Vector arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.TransformPointVector">
            <summary>Sets the shim of Matrix.TransformPoint(Vector arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances._operator_mulMatrix">
            <summary>Sets the shim of Matrix._operator_mul(Matrix other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.originGet">
            <summary>Sets the shim of Matrix.get_origin()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.originSetVector">
            <summary>Sets the shim of Matrix.set_origin(Vector value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.xBasisGet">
            <summary>Sets the shim of Matrix.get_xBasis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.xBasisSetVector">
            <summary>Sets the shim of Matrix.set_xBasis(Vector value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.yBasisGet">
            <summary>Sets the shim of Matrix.get_yBasis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.yBasisSetVector">
            <summary>Sets the shim of Matrix.set_yBasis(Vector value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.zBasisGet">
            <summary>Sets the shim of Matrix.get_zBasis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimMatrix.AllInstances.zBasisSetVector">
            <summary>Sets the shim of Matrix.set_zBasis(Vector value)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimPointable">
            <summary>Shim type of Leap.Pointable</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointable.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointable.#ctor(Leap.Pointable)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointable.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointable.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointable.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.Constructor">
            <summary>Sets the shim of Pointable.Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Pointable.Pointable(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.DirectionGet">
            <summary>Sets the shim of Pointable.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.Dispose">
            <summary>Sets the shim of Pointable.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.EqualsPointable">
            <summary>Sets the shim of Pointable.Equals(Pointable arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.FrameGet">
            <summary>Sets the shim of Pointable.get_Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.HandGet">
            <summary>Sets the shim of Pointable.get_Hand()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.IdGet">
            <summary>Sets the shim of Pointable.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.InvalidGet">
            <summary>Sets the shim of Pointable.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.IsFingerGet">
            <summary>Sets the shim of Pointable.get_IsFinger()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.IsToolGet">
            <summary>Sets the shim of Pointable.get_IsTool()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.IsValidGet">
            <summary>Sets the shim of Pointable.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.LengthGet">
            <summary>Sets the shim of Pointable.get_Length()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.StabilizedTipPositionGet">
            <summary>Sets the shim of Pointable.get_StabilizedTipPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.TimeVisibleGet">
            <summary>Sets the shim of Pointable.get_TimeVisible()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.TipPositionGet">
            <summary>Sets the shim of Pointable.get_TipPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.TipVelocityGet">
            <summary>Sets the shim of Pointable.get_TipVelocity()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.ToString">
            <summary>Sets the shim of Pointable.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.TouchDistanceGet">
            <summary>Sets the shim of Pointable.get_TouchDistance()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.TouchZoneGet">
            <summary>Sets the shim of Pointable.get_TouchZone()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.WidthGet">
            <summary>Sets the shim of Pointable.get_Width()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.getCPtrPointable">
            <summary>Sets the shim of Pointable.getCPtr(Pointable obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimPointable.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.DirectionGet">
            <summary>Sets the shim of Pointable.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.Dispose">
            <summary>Sets the shim of Pointable.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.EqualsPointable">
            <summary>Sets the shim of Pointable.Equals(Pointable arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.FrameGet">
            <summary>Sets the shim of Pointable.get_Frame()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.HandGet">
            <summary>Sets the shim of Pointable.get_Hand()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.IdGet">
            <summary>Sets the shim of Pointable.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.IsFingerGet">
            <summary>Sets the shim of Pointable.get_IsFinger()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.IsToolGet">
            <summary>Sets the shim of Pointable.get_IsTool()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.IsValidGet">
            <summary>Sets the shim of Pointable.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.LengthGet">
            <summary>Sets the shim of Pointable.get_Length()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.StabilizedTipPositionGet">
            <summary>Sets the shim of Pointable.get_StabilizedTipPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.TimeVisibleGet">
            <summary>Sets the shim of Pointable.get_TimeVisible()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.TipPositionGet">
            <summary>Sets the shim of Pointable.get_TipPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.TipVelocityGet">
            <summary>Sets the shim of Pointable.get_TipVelocity()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.ToString01">
            <summary>Sets the shim of Pointable.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.TouchDistanceGet">
            <summary>Sets the shim of Pointable.get_TouchDistance()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.TouchZoneGet">
            <summary>Sets the shim of Pointable.get_TouchZone()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointable.AllInstances.WidthGet">
            <summary>Sets the shim of Pointable.get_Width()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimPointableList">
            <summary>Shim type of Leap.PointableList</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointableList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointableList.#ctor(Leap.PointableList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointableList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointableList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointableList.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointableList.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimPointableList.Bind(System.Collections.Generic.IEnumerable{Leap.Pointable})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AppendFingerList">
            <summary>Sets the shim of PointableList.Append(FingerList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AppendPointableList">
            <summary>Sets the shim of PointableList.Append(PointableList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AppendToolList">
            <summary>Sets the shim of PointableList.Append(ToolList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.Constructor">
            <summary>Sets the shim of PointableList.PointableList()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.ConstructorIntPtrBoolean">
            <summary>Sets the shim of PointableList.PointableList(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.CountGet">
            <summary>Sets the shim of PointableList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.Dispose">
            <summary>Sets the shim of PointableList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.EmptyGet">
            <summary>Sets the shim of PointableList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.FrontmostGet">
            <summary>Sets the shim of PointableList.get_Frontmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.GetEnumerator">
            <summary>Sets the shim of PointableList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.IsEmptyGet">
            <summary>Sets the shim of PointableList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.ItemGetInt32">
            <summary>Sets the shim of PointableList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.LeftmostGet">
            <summary>Sets the shim of PointableList.get_Leftmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.RightmostGet">
            <summary>Sets the shim of PointableList.get_Rightmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of PointableList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList._operator_getInt32">
            <summary>Sets the shim of PointableList._operator_get(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.getCPtrPointableList">
            <summary>Sets the shim of PointableList.getCPtr(PointableList obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimPointableList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.AppendFingerList">
            <summary>Sets the shim of PointableList.Append(FingerList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.AppendPointableList">
            <summary>Sets the shim of PointableList.Append(PointableList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.AppendToolList">
            <summary>Sets the shim of PointableList.Append(ToolList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.CountGet">
            <summary>Sets the shim of PointableList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.Dispose">
            <summary>Sets the shim of PointableList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.EmptyGet">
            <summary>Sets the shim of PointableList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.FrontmostGet">
            <summary>Sets the shim of PointableList.get_Frontmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.GetEnumerator">
            <summary>Sets the shim of PointableList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.IsEmptyGet">
            <summary>Sets the shim of PointableList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.ItemGetInt32">
            <summary>Sets the shim of PointableList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.LeftmostGet">
            <summary>Sets the shim of PointableList.get_Leftmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.RightmostGet">
            <summary>Sets the shim of PointableList.get_Rightmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of PointableList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimPointableList.AllInstances._operator_getInt32">
            <summary>Sets the shim of PointableList._operator_get(Int32 index)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimScreen">
            <summary>Shim type of Leap.Screen</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreen.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreen.#ctor(Leap.Screen)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreen.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreen.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreen.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.BottomLeftCornerGet">
            <summary>Sets the shim of Screen.get_BottomLeftCorner()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.Constructor">
            <summary>Sets the shim of Screen.Screen()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Screen.Screen(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.Dispose">
            <summary>Sets the shim of Screen.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.DistanceToPointVector">
            <summary>Sets the shim of Screen.DistanceToPoint(Vector point)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.EqualsScreen">
            <summary>Sets the shim of Screen.Equals(Screen arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.HeightPixelsGet">
            <summary>Sets the shim of Screen.get_HeightPixels()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.HorizontalAxisGet">
            <summary>Sets the shim of Screen.get_HorizontalAxis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.IdGet">
            <summary>Sets the shim of Screen.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.IntersectPointableBoolean">
            <summary>Sets the shim of Screen.Intersect(Pointable pointable, Boolean normalize)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.IntersectPointableBooleanSingle">
            <summary>Sets the shim of Screen.Intersect(Pointable pointable, Boolean normalize, Single clampRatio)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.IntersectVectorVectorBoolean">
            <summary>Sets the shim of Screen.Intersect(Vector position, Vector direction, Boolean normalize)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.IntersectVectorVectorBooleanSingle">
            <summary>Sets the shim of Screen.Intersect(Vector position, Vector direction, Boolean normalize, Single clampRatio)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.InvalidGet">
            <summary>Sets the shim of Screen.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.IsValidGet">
            <summary>Sets the shim of Screen.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.Normal">
            <summary>Sets the shim of Screen.Normal()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.ProjectVectorBoolean">
            <summary>Sets the shim of Screen.Project(Vector position, Boolean normalize)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.ProjectVectorBooleanSingle">
            <summary>Sets the shim of Screen.Project(Vector position, Boolean normalize, Single clampRatio)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.ToString">
            <summary>Sets the shim of Screen.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.VerticalAxisGet">
            <summary>Sets the shim of Screen.get_VerticalAxis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.WidthPixelsGet">
            <summary>Sets the shim of Screen.get_WidthPixels()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.getCPtrScreen">
            <summary>Sets the shim of Screen.getCPtr(Screen obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimScreen.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.BottomLeftCornerGet">
            <summary>Sets the shim of Screen.get_BottomLeftCorner()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.Dispose">
            <summary>Sets the shim of Screen.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.DistanceToPointVector">
            <summary>Sets the shim of Screen.DistanceToPoint(Vector point)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.EqualsScreen">
            <summary>Sets the shim of Screen.Equals(Screen arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.HeightPixelsGet">
            <summary>Sets the shim of Screen.get_HeightPixels()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.HorizontalAxisGet">
            <summary>Sets the shim of Screen.get_HorizontalAxis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.IdGet">
            <summary>Sets the shim of Screen.get_Id()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.IntersectPointableBoolean">
            <summary>Sets the shim of Screen.Intersect(Pointable pointable, Boolean normalize)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.IntersectPointableBooleanSingle">
            <summary>Sets the shim of Screen.Intersect(Pointable pointable, Boolean normalize, Single clampRatio)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.IntersectVectorVectorBoolean">
            <summary>Sets the shim of Screen.Intersect(Vector position, Vector direction, Boolean normalize)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.IntersectVectorVectorBooleanSingle">
            <summary>Sets the shim of Screen.Intersect(Vector position, Vector direction, Boolean normalize, Single clampRatio)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.IsValidGet">
            <summary>Sets the shim of Screen.get_IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.Normal">
            <summary>Sets the shim of Screen.Normal()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.ProjectVectorBoolean">
            <summary>Sets the shim of Screen.Project(Vector position, Boolean normalize)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.ProjectVectorBooleanSingle">
            <summary>Sets the shim of Screen.Project(Vector position, Boolean normalize, Single clampRatio)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.ToString01">
            <summary>Sets the shim of Screen.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.VerticalAxisGet">
            <summary>Sets the shim of Screen.get_VerticalAxis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreen.AllInstances.WidthPixelsGet">
            <summary>Sets the shim of Screen.get_WidthPixels()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimScreenList">
            <summary>Shim type of Leap.ScreenList</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenList.#ctor(Leap.ScreenList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenList.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenList.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenList.Bind(System.Collections.Generic.IEnumerable{Leap.Screen})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.ClosestScreenHitPointable">
            <summary>Sets the shim of ScreenList.ClosestScreenHit(Pointable pointable)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.ClosestScreenHitVectorVector">
            <summary>Sets the shim of ScreenList.ClosestScreenHit(Vector position, Vector direction)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.ClosestScreenVector">
            <summary>Sets the shim of ScreenList.ClosestScreen(Vector position)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.Constructor">
            <summary>Sets the shim of ScreenList.ScreenList()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.ConstructorIntPtrBoolean">
            <summary>Sets the shim of ScreenList.ScreenList(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.CountGet">
            <summary>Sets the shim of ScreenList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.Dispose">
            <summary>Sets the shim of ScreenList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.EmptyGet">
            <summary>Sets the shim of ScreenList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.GetEnumerator">
            <summary>Sets the shim of ScreenList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.IsEmptyGet">
            <summary>Sets the shim of ScreenList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.ItemGetInt32">
            <summary>Sets the shim of ScreenList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of ScreenList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList._operator_getInt32">
            <summary>Sets the shim of ScreenList._operator_get(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.getCPtrScreenList">
            <summary>Sets the shim of ScreenList.getCPtr(ScreenList obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimScreenList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.ClosestScreenHitPointable">
            <summary>Sets the shim of ScreenList.ClosestScreenHit(Pointable pointable)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.ClosestScreenHitVectorVector">
            <summary>Sets the shim of ScreenList.ClosestScreenHit(Vector position, Vector direction)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.ClosestScreenVector">
            <summary>Sets the shim of ScreenList.ClosestScreen(Vector position)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.CountGet">
            <summary>Sets the shim of ScreenList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.Dispose">
            <summary>Sets the shim of ScreenList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.EmptyGet">
            <summary>Sets the shim of ScreenList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.GetEnumerator">
            <summary>Sets the shim of ScreenList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.IsEmptyGet">
            <summary>Sets the shim of ScreenList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.ItemGetInt32">
            <summary>Sets the shim of ScreenList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of ScreenList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenList.AllInstances._operator_getInt32">
            <summary>Sets the shim of ScreenList._operator_get(Int32 index)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimScreenTapGesture">
            <summary>Shim type of Leap.ScreenTapGesture</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenTapGesture.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenTapGesture.#ctor(Leap.ScreenTapGesture)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenTapGesture.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenTapGesture.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimScreenTapGesture.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.ClassType">
            <summary>Sets the shim of ScreenTapGesture.ClassType()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.Constructor">
            <summary>Sets the shim of ScreenTapGesture.ScreenTapGesture()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.ConstructorGesture">
            <summary>Sets the shim of ScreenTapGesture.ScreenTapGesture(Gesture rhs)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.ConstructorIntPtrBoolean">
            <summary>Sets the shim of ScreenTapGesture.ScreenTapGesture(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.DirectionGet">
            <summary>Sets the shim of ScreenTapGesture.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.Dispose">
            <summary>Sets the shim of ScreenTapGesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.PointableGet">
            <summary>Sets the shim of ScreenTapGesture.get_Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.PositionGet">
            <summary>Sets the shim of ScreenTapGesture.get_Position()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.ProgressGet">
            <summary>Sets the shim of ScreenTapGesture.get_Progress()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.getCPtrScreenTapGesture">
            <summary>Sets the shim of ScreenTapGesture.getCPtr(ScreenTapGesture obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimScreenTapGesture.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.AllInstances.DirectionGet">
            <summary>Sets the shim of ScreenTapGesture.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.AllInstances.Dispose">
            <summary>Sets the shim of ScreenTapGesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.AllInstances.PointableGet">
            <summary>Sets the shim of ScreenTapGesture.get_Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.AllInstances.PositionGet">
            <summary>Sets the shim of ScreenTapGesture.get_Position()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimScreenTapGesture.AllInstances.ProgressGet">
            <summary>Sets the shim of ScreenTapGesture.get_Progress()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimSwipeGesture">
            <summary>Shim type of Leap.SwipeGesture</summary>
        </member>
        <member name="M:Leap.Fakes.ShimSwipeGesture.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimSwipeGesture.#ctor(Leap.SwipeGesture)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimSwipeGesture.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimSwipeGesture.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimSwipeGesture.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.ClassType">
            <summary>Sets the shim of SwipeGesture.ClassType()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.Constructor">
            <summary>Sets the shim of SwipeGesture.SwipeGesture()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.ConstructorGesture">
            <summary>Sets the shim of SwipeGesture.SwipeGesture(Gesture rhs)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.ConstructorIntPtrBoolean">
            <summary>Sets the shim of SwipeGesture.SwipeGesture(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.DirectionGet">
            <summary>Sets the shim of SwipeGesture.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.Dispose">
            <summary>Sets the shim of SwipeGesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.PointableGet">
            <summary>Sets the shim of SwipeGesture.get_Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.PositionGet">
            <summary>Sets the shim of SwipeGesture.get_Position()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.SpeedGet">
            <summary>Sets the shim of SwipeGesture.get_Speed()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.StartPositionGet">
            <summary>Sets the shim of SwipeGesture.get_StartPosition()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.getCPtrSwipeGesture">
            <summary>Sets the shim of SwipeGesture.getCPtr(SwipeGesture obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimSwipeGesture.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.AllInstances.DirectionGet">
            <summary>Sets the shim of SwipeGesture.get_Direction()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.AllInstances.Dispose">
            <summary>Sets the shim of SwipeGesture.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.AllInstances.PointableGet">
            <summary>Sets the shim of SwipeGesture.get_Pointable()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.AllInstances.PositionGet">
            <summary>Sets the shim of SwipeGesture.get_Position()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.AllInstances.SpeedGet">
            <summary>Sets the shim of SwipeGesture.get_Speed()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimSwipeGesture.AllInstances.StartPositionGet">
            <summary>Sets the shim of SwipeGesture.get_StartPosition()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimTool">
            <summary>Shim type of Leap.Tool</summary>
        </member>
        <member name="M:Leap.Fakes.ShimTool.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimTool.#ctor(Leap.Tool)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimTool.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimTool.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimTool.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.Constructor">
            <summary>Sets the shim of Tool.Tool()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Tool.Tool(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.ConstructorPointable">
            <summary>Sets the shim of Tool.Tool(Pointable arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.Dispose">
            <summary>Sets the shim of Tool.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.InvalidGet">
            <summary>Sets the shim of Tool.get_Invalid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.ToString">
            <summary>Sets the shim of Tool.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.getCPtrTool">
            <summary>Sets the shim of Tool.getCPtr(Tool obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimTool.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.AllInstances.Dispose">
            <summary>Sets the shim of Tool.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimTool.AllInstances.ToString01">
            <summary>Sets the shim of Tool.ToString()</summary>
        </member>
        <member name="T:Leap.Fakes.ShimToolList">
            <summary>Shim type of Leap.ToolList</summary>
        </member>
        <member name="M:Leap.Fakes.ShimToolList.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimToolList.#ctor(Leap.ToolList)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimToolList.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimToolList.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimToolList.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimToolList.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Leap.Fakes.ShimToolList.Bind(System.Collections.Generic.IEnumerable{Leap.Tool})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AppendToolList">
            <summary>Sets the shim of ToolList.Append(ToolList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.Constructor">
            <summary>Sets the shim of ToolList.ToolList()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.ConstructorIntPtrBoolean">
            <summary>Sets the shim of ToolList.ToolList(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.CountGet">
            <summary>Sets the shim of ToolList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.Dispose">
            <summary>Sets the shim of ToolList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.EmptyGet">
            <summary>Sets the shim of ToolList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.FrontmostGet">
            <summary>Sets the shim of ToolList.get_Frontmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.GetEnumerator">
            <summary>Sets the shim of ToolList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.IsEmptyGet">
            <summary>Sets the shim of ToolList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.ItemGetInt32">
            <summary>Sets the shim of ToolList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.LeftmostGet">
            <summary>Sets the shim of ToolList.get_Leftmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.RightmostGet">
            <summary>Sets the shim of ToolList.get_Rightmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of ToolList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList._operator_getInt32">
            <summary>Sets the shim of ToolList._operator_get(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.getCPtrToolList">
            <summary>Sets the shim of ToolList.getCPtr(ToolList obj)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimToolList.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.AppendToolList">
            <summary>Sets the shim of ToolList.Append(ToolList other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.CountGet">
            <summary>Sets the shim of ToolList.get_Count()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.Dispose">
            <summary>Sets the shim of ToolList.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.EmptyGet">
            <summary>Sets the shim of ToolList.get_Empty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.FrontmostGet">
            <summary>Sets the shim of ToolList.get_Frontmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.GetEnumerator">
            <summary>Sets the shim of ToolList.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.IsEmptyGet">
            <summary>Sets the shim of ToolList.get_IsEmpty()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.ItemGetInt32">
            <summary>Sets the shim of ToolList.get_Item(Int32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.LeftmostGet">
            <summary>Sets the shim of ToolList.get_Leftmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.RightmostGet">
            <summary>Sets the shim of ToolList.get_Rightmost()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Sets the shim of ToolList.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimToolList.AllInstances._operator_getInt32">
            <summary>Sets the shim of ToolList._operator_get(Int32 index)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimVector">
            <summary>Shim type of Leap.Vector</summary>
        </member>
        <member name="M:Leap.Fakes.ShimVector.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimVector.#ctor(Leap.Vector)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Leap.Fakes.ShimVector.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimVector.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Leap.Fakes.ShimVector.Bind(System.IDisposable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AdditionOpVectorVector">
            <summary>Sets the shim of Vector.op_Addition(Vector v1, Vector v2)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AngleToVector">
            <summary>Sets the shim of Vector.AngleTo(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.BackwardGet">
            <summary>Sets the shim of Vector.get_Backward()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.Constructor">
            <summary>Sets the shim of Vector.Vector()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ConstructorIntPtrBoolean">
            <summary>Sets the shim of Vector.Vector(IntPtr cPtr, Boolean cMemoryOwn)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ConstructorSingleSingleSingle">
            <summary>Sets the shim of Vector.Vector(Single _x, Single _y, Single _z)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ConstructorVector">
            <summary>Sets the shim of Vector.Vector(Vector vector)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.CrossVector">
            <summary>Sets the shim of Vector.Cross(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.Dispose">
            <summary>Sets the shim of Vector.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.DistanceToVector">
            <summary>Sets the shim of Vector.DistanceTo(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.DivisionOpVectorSingle">
            <summary>Sets the shim of Vector.op_Division(Vector v1, Single scalar)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.DotVector">
            <summary>Sets the shim of Vector.Dot(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.DownGet">
            <summary>Sets the shim of Vector.get_Down()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.EqualsVector">
            <summary>Sets the shim of Vector.Equals(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ForwardGet">
            <summary>Sets the shim of Vector.get_Forward()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.IsValid">
            <summary>Sets the shim of Vector.IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.LeftGet">
            <summary>Sets the shim of Vector.get_Left()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.MagnitudeGet">
            <summary>Sets the shim of Vector.get_Magnitude()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.MagnitudeSquaredGet">
            <summary>Sets the shim of Vector.get_MagnitudeSquared()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.MultiplyOpSingleVector">
            <summary>Sets the shim of Vector.op_Multiply(Single scalar, Vector v1)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.MultiplyOpVectorSingle">
            <summary>Sets the shim of Vector.op_Multiply(Vector v1, Single scalar)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.NormalizedGet">
            <summary>Sets the shim of Vector.get_Normalized()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.PitchGet">
            <summary>Sets the shim of Vector.get_Pitch()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.RightGet">
            <summary>Sets the shim of Vector.get_Right()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.RollGet">
            <summary>Sets the shim of Vector.get_Roll()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.SubtractionOpVectorVector">
            <summary>Sets the shim of Vector.op_Subtraction(Vector v1, Vector v2)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ToFloatArray">
            <summary>Sets the shim of Vector.ToFloatArray()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ToString">
            <summary>Sets the shim of Vector.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.UnaryNegationOpVector">
            <summary>Sets the shim of Vector.op_UnaryNegation(Vector v1)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.UpGet">
            <summary>Sets the shim of Vector.get_Up()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.XAxisGet">
            <summary>Sets the shim of Vector.get_XAxis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.YAxisGet">
            <summary>Sets the shim of Vector.get_YAxis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.YawGet">
            <summary>Sets the shim of Vector.get_Yaw()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ZAxisGet">
            <summary>Sets the shim of Vector.get_ZAxis()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ZeroGet">
            <summary>Sets the shim of Vector.get_Zero()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector._operator_addVector">
            <summary>Sets the shim of Vector._operator_add(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector._operator_divSingle">
            <summary>Sets the shim of Vector._operator_div(Single scalar)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector._operator_getUInt32">
            <summary>Sets the shim of Vector._operator_get(UInt32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector._operator_mulSingle">
            <summary>Sets the shim of Vector._operator_mul(Single scalar)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector._operator_sub">
            <summary>Sets the shim of Vector._operator_sub()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector._operator_subVector">
            <summary>Sets the shim of Vector._operator_sub(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.getCPtrVector">
            <summary>Sets the shim of Vector.getCPtr(Vector obj)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.xGet">
            <summary>Sets the shim of Vector.get_x()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.xSetSingle">
            <summary>Sets the shim of Vector.set_x(Single value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.yGet">
            <summary>Sets the shim of Vector.get_y()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.ySetSingle">
            <summary>Sets the shim of Vector.set_y(Single value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.zGet">
            <summary>Sets the shim of Vector.get_z()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.zSetSingle">
            <summary>Sets the shim of Vector.set_z(Single value)</summary>
        </member>
        <member name="T:Leap.Fakes.ShimVector.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.AngleToVector">
            <summary>Sets the shim of Vector.AngleTo(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.CrossVector">
            <summary>Sets the shim of Vector.Cross(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.Dispose">
            <summary>Sets the shim of Vector.Dispose()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.DistanceToVector">
            <summary>Sets the shim of Vector.DistanceTo(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.DotVector">
            <summary>Sets the shim of Vector.Dot(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.EqualsVector">
            <summary>Sets the shim of Vector.Equals(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.IsValid">
            <summary>Sets the shim of Vector.IsValid()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.MagnitudeGet">
            <summary>Sets the shim of Vector.get_Magnitude()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.MagnitudeSquaredGet">
            <summary>Sets the shim of Vector.get_MagnitudeSquared()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.NormalizedGet">
            <summary>Sets the shim of Vector.get_Normalized()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.PitchGet">
            <summary>Sets the shim of Vector.get_Pitch()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.RollGet">
            <summary>Sets the shim of Vector.get_Roll()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.ToFloatArray">
            <summary>Sets the shim of Vector.ToFloatArray()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.ToString01">
            <summary>Sets the shim of Vector.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.YawGet">
            <summary>Sets the shim of Vector.get_Yaw()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances._operator_addVector">
            <summary>Sets the shim of Vector._operator_add(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances._operator_divSingle">
            <summary>Sets the shim of Vector._operator_div(Single scalar)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances._operator_getUInt32">
            <summary>Sets the shim of Vector._operator_get(UInt32 index)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances._operator_mulSingle">
            <summary>Sets the shim of Vector._operator_mul(Single scalar)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances._operator_sub">
            <summary>Sets the shim of Vector._operator_sub()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances._operator_subVector">
            <summary>Sets the shim of Vector._operator_sub(Vector other)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.xGet">
            <summary>Sets the shim of Vector.get_x()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.xSetSingle">
            <summary>Sets the shim of Vector.set_x(Single value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.yGet">
            <summary>Sets the shim of Vector.get_y()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.ySetSingle">
            <summary>Sets the shim of Vector.set_y(Single value)</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.zGet">
            <summary>Sets the shim of Vector.get_z()</summary>
        </member>
        <member name="P:Leap.Fakes.ShimVector.AllInstances.zSetSingle">
            <summary>Sets the shim of Vector.set_z(Single value)</summary>
        </member>
        <member name="T:Leap.Fakes.StubCircleGesture">
            <summary>Stub type of Leap.CircleGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubCircleGesture.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubCircleGesture.#ctor(Leap.Gesture)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubCircleGesture.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubCircleGesture.Dispose">
            <summary>Sets the stub of CircleGesture.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubCircleGesture.Dispose01">
            <summary>Sets the stub of CircleGesture.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubCircleGesture.InitializeStub">
            <summary>Initializes a new instance of type StubCircleGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubCircleGesture.ToString">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubCircleGesture.ToString01">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubCircleGesture.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubCircleGesture.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubCircleGesture.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubConfig">
            <summary>Stub type of Leap.Config</summary>
        </member>
        <member name="M:Leap.Fakes.StubConfig.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubConfig.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubConfig.Dispose">
            <summary>Sets the stub of Config.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubConfig.Dispose01">
            <summary>Sets the stub of Config.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubConfig.InitializeStub">
            <summary>Initializes a new instance of type StubConfig</summary>
        </member>
        <member name="P:Leap.Fakes.StubConfig.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubConfig.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubConfig.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubController">
            <summary>Stub type of Leap.Controller</summary>
        </member>
        <member name="M:Leap.Fakes.StubController.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubController.#ctor(Leap.Listener)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubController.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubController.Dispose">
            <summary>Sets the stub of Controller.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubController.Dispose01">
            <summary>Sets the stub of Controller.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubController.InitializeStub">
            <summary>Initializes a new instance of type StubController</summary>
        </member>
        <member name="P:Leap.Fakes.StubController.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubController.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubController.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubDevice">
            <summary>Stub type of Leap.Device</summary>
        </member>
        <member name="M:Leap.Fakes.StubDevice.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubDevice.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubDevice.Dispose">
            <summary>Sets the stub of Device.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubDevice.Dispose01">
            <summary>Sets the stub of Device.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubDevice.InitializeStub">
            <summary>Initializes a new instance of type StubDevice</summary>
        </member>
        <member name="M:Leap.Fakes.StubDevice.ToString">
            <summary>Sets the stub of Device.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubDevice.ToString01">
            <summary>Sets the stub of Device.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubDevice.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubDevice.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubDevice.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubDeviceList">
            <summary>Stub type of Leap.DeviceList</summary>
        </member>
        <member name="M:Leap.Fakes.StubDeviceList.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubDeviceList.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubDeviceList.Dispose">
            <summary>Sets the stub of DeviceList.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubDeviceList.Dispose01">
            <summary>Sets the stub of DeviceList.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubDeviceList.InitializeStub">
            <summary>Initializes a new instance of type StubDeviceList</summary>
        </member>
        <member name="P:Leap.Fakes.StubDeviceList.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubDeviceList.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubDeviceList.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubFinger">
            <summary>Stub type of Leap.Finger</summary>
        </member>
        <member name="M:Leap.Fakes.StubFinger.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubFinger.#ctor(Leap.Pointable)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubFinger.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubFinger.Dispose">
            <summary>Sets the stub of Finger.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubFinger.Dispose01">
            <summary>Sets the stub of Finger.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubFinger.InitializeStub">
            <summary>Initializes a new instance of type StubFinger</summary>
        </member>
        <member name="M:Leap.Fakes.StubFinger.ToString">
            <summary>Sets the stub of Finger.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubFinger.ToString01">
            <summary>Sets the stub of Finger.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubFinger.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubFinger.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubFinger.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubFingerList">
            <summary>Stub type of Leap.FingerList</summary>
        </member>
        <member name="M:Leap.Fakes.StubFingerList.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubFingerList.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubFingerList.Dispose">
            <summary>Sets the stub of FingerList.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubFingerList.Dispose01">
            <summary>Sets the stub of FingerList.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubFingerList.InitializeStub">
            <summary>Initializes a new instance of type StubFingerList</summary>
        </member>
        <member name="P:Leap.Fakes.StubFingerList.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubFingerList.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubFingerList.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubFrame">
            <summary>Stub type of Leap.Frame</summary>
        </member>
        <member name="M:Leap.Fakes.StubFrame.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubFrame.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubFrame.Dispose">
            <summary>Sets the stub of Frame.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubFrame.Dispose01">
            <summary>Sets the stub of Frame.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubFrame.InitializeStub">
            <summary>Initializes a new instance of type StubFrame</summary>
        </member>
        <member name="M:Leap.Fakes.StubFrame.ToString">
            <summary>Sets the stub of Frame.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubFrame.ToString01">
            <summary>Sets the stub of Frame.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubFrame.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubFrame.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubFrame.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubGesture">
            <summary>Stub type of Leap.Gesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubGesture.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubGesture.#ctor(Leap.Gesture)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubGesture.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubGesture.Dispose">
            <summary>Sets the stub of Gesture.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubGesture.Dispose01">
            <summary>Sets the stub of Gesture.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubGesture.InitializeStub">
            <summary>Initializes a new instance of type StubGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubGesture.ToString">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubGesture.ToString01">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubGesture.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubGesture.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubGesture.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubGestureList">
            <summary>Stub type of Leap.GestureList</summary>
        </member>
        <member name="M:Leap.Fakes.StubGestureList.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubGestureList.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubGestureList.Dispose">
            <summary>Sets the stub of GestureList.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubGestureList.Dispose01">
            <summary>Sets the stub of GestureList.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubGestureList.InitializeStub">
            <summary>Initializes a new instance of type StubGestureList</summary>
        </member>
        <member name="P:Leap.Fakes.StubGestureList.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubGestureList.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubGestureList.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubHand">
            <summary>Stub type of Leap.Hand</summary>
        </member>
        <member name="M:Leap.Fakes.StubHand.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubHand.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubHand.Dispose">
            <summary>Sets the stub of Hand.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubHand.Dispose01">
            <summary>Sets the stub of Hand.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubHand.InitializeStub">
            <summary>Initializes a new instance of type StubHand</summary>
        </member>
        <member name="M:Leap.Fakes.StubHand.ToString">
            <summary>Sets the stub of Hand.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubHand.ToString01">
            <summary>Sets the stub of Hand.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubHand.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubHand.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubHand.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubHandList">
            <summary>Stub type of Leap.HandList</summary>
        </member>
        <member name="M:Leap.Fakes.StubHandList.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubHandList.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubHandList.Dispose">
            <summary>Sets the stub of HandList.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubHandList.Dispose01">
            <summary>Sets the stub of HandList.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubHandList.InitializeStub">
            <summary>Initializes a new instance of type StubHandList</summary>
        </member>
        <member name="P:Leap.Fakes.StubHandList.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubHandList.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubHandList.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubInteractionBox">
            <summary>Stub type of Leap.InteractionBox</summary>
        </member>
        <member name="M:Leap.Fakes.StubInteractionBox.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubInteractionBox.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubInteractionBox.Dispose">
            <summary>Sets the stub of InteractionBox.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubInteractionBox.Dispose01">
            <summary>Sets the stub of InteractionBox.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubInteractionBox.InitializeStub">
            <summary>Initializes a new instance of type StubInteractionBox</summary>
        </member>
        <member name="M:Leap.Fakes.StubInteractionBox.ToString">
            <summary>Sets the stub of InteractionBox.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubInteractionBox.ToString01">
            <summary>Sets the stub of InteractionBox.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubInteractionBox.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubInteractionBox.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubInteractionBox.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubInterface">
            <summary>Stub type of Leap.Interface</summary>
        </member>
        <member name="M:Leap.Fakes.StubInterface.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubInterface.Dispose">
            <summary>Sets the stub of Interface.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubInterface.Dispose01">
            <summary>Sets the stub of Interface.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubInterface.InitializeStub">
            <summary>Initializes a new instance of type StubInterface</summary>
        </member>
        <member name="P:Leap.Fakes.StubInterface.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubInterface.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubInterface.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubKeyTapGesture">
            <summary>Stub type of Leap.KeyTapGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubKeyTapGesture.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubKeyTapGesture.#ctor(Leap.Gesture)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubKeyTapGesture.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubKeyTapGesture.Dispose">
            <summary>Sets the stub of KeyTapGesture.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubKeyTapGesture.Dispose01">
            <summary>Sets the stub of KeyTapGesture.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubKeyTapGesture.InitializeStub">
            <summary>Initializes a new instance of type StubKeyTapGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubKeyTapGesture.ToString">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubKeyTapGesture.ToString01">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubKeyTapGesture.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubKeyTapGesture.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubKeyTapGesture.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubLeap">
            <summary>Stub type of Leap.Leap</summary>
        </member>
        <member name="M:Leap.Fakes.StubLeap.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubLeap.InitializeStub">
            <summary>Initializes a new instance of type StubLeap</summary>
        </member>
        <member name="P:Leap.Fakes.StubLeap.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubLeap.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubLeap.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubListener">
            <summary>Stub type of Leap.Listener</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.Dispose">
            <summary>Sets the stub of Listener.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubListener.Dispose01">
            <summary>Sets the stub of Listener.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.InitializeStub">
            <summary>Initializes a new instance of type StubListener</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.OnConnect(Leap.Controller)">
            <summary>Sets the stub of Listener.OnConnect(Controller arg0)</summary>
        </member>
        <member name="F:Leap.Fakes.StubListener.OnConnectController">
            <summary>Sets the stub of Listener.OnConnect(Controller arg0)</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.OnDisconnect(Leap.Controller)">
            <summary>Sets the stub of Listener.OnDisconnect(Controller arg0)</summary>
        </member>
        <member name="F:Leap.Fakes.StubListener.OnDisconnectController">
            <summary>Sets the stub of Listener.OnDisconnect(Controller arg0)</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.OnExit(Leap.Controller)">
            <summary>Sets the stub of Listener.OnExit(Controller arg0)</summary>
        </member>
        <member name="F:Leap.Fakes.StubListener.OnExitController">
            <summary>Sets the stub of Listener.OnExit(Controller arg0)</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.OnFocusGained(Leap.Controller)">
            <summary>Sets the stub of Listener.OnFocusGained(Controller arg0)</summary>
        </member>
        <member name="F:Leap.Fakes.StubListener.OnFocusGainedController">
            <summary>Sets the stub of Listener.OnFocusGained(Controller arg0)</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.OnFocusLost(Leap.Controller)">
            <summary>Sets the stub of Listener.OnFocusLost(Controller arg0)</summary>
        </member>
        <member name="F:Leap.Fakes.StubListener.OnFocusLostController">
            <summary>Sets the stub of Listener.OnFocusLost(Controller arg0)</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.OnFrame(Leap.Controller)">
            <summary>Sets the stub of Listener.OnFrame(Controller arg0)</summary>
        </member>
        <member name="F:Leap.Fakes.StubListener.OnFrameController">
            <summary>Sets the stub of Listener.OnFrame(Controller arg0)</summary>
        </member>
        <member name="M:Leap.Fakes.StubListener.OnInit(Leap.Controller)">
            <summary>Sets the stub of Listener.OnInit(Controller arg0)</summary>
        </member>
        <member name="F:Leap.Fakes.StubListener.OnInitController">
            <summary>Sets the stub of Listener.OnInit(Controller arg0)</summary>
        </member>
        <member name="P:Leap.Fakes.StubListener.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubListener.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubListener.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubMatrix">
            <summary>Stub type of Leap.Matrix</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.#ctor(Leap.Matrix)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.#ctor(Leap.Vector,System.Single)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.#ctor(Leap.Vector,System.Single,Leap.Vector)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.#ctor(Leap.Vector,Leap.Vector,Leap.Vector)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.#ctor(Leap.Vector,Leap.Vector,Leap.Vector,Leap.Vector)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.Dispose">
            <summary>Sets the stub of Matrix.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubMatrix.Dispose01">
            <summary>Sets the stub of Matrix.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.InitializeStub">
            <summary>Initializes a new instance of type StubMatrix</summary>
        </member>
        <member name="M:Leap.Fakes.StubMatrix.ToString">
            <summary>Sets the stub of Matrix.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubMatrix.ToString01">
            <summary>Sets the stub of Matrix.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubMatrix.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubMatrix.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubMatrix.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubPointable">
            <summary>Stub type of Leap.Pointable</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointable.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointable.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointable.Dispose">
            <summary>Sets the stub of Pointable.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubPointable.Dispose01">
            <summary>Sets the stub of Pointable.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointable.InitializeStub">
            <summary>Initializes a new instance of type StubPointable</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointable.ToString">
            <summary>Sets the stub of Pointable.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubPointable.ToString01">
            <summary>Sets the stub of Pointable.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubPointable.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubPointable.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubPointable.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubPointableList">
            <summary>Stub type of Leap.PointableList</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointableList.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointableList.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointableList.Dispose">
            <summary>Sets the stub of PointableList.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubPointableList.Dispose01">
            <summary>Sets the stub of PointableList.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubPointableList.InitializeStub">
            <summary>Initializes a new instance of type StubPointableList</summary>
        </member>
        <member name="P:Leap.Fakes.StubPointableList.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubPointableList.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubPointableList.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubScreen">
            <summary>Stub type of Leap.Screen</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreen.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreen.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreen.Dispose">
            <summary>Sets the stub of Screen.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubScreen.Dispose01">
            <summary>Sets the stub of Screen.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreen.InitializeStub">
            <summary>Initializes a new instance of type StubScreen</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreen.ToString">
            <summary>Sets the stub of Screen.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubScreen.ToString01">
            <summary>Sets the stub of Screen.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreen.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreen.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreen.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubScreenList">
            <summary>Stub type of Leap.ScreenList</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenList.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenList.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenList.Dispose">
            <summary>Sets the stub of ScreenList.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubScreenList.Dispose01">
            <summary>Sets the stub of ScreenList.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenList.InitializeStub">
            <summary>Initializes a new instance of type StubScreenList</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreenList.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreenList.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreenList.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubScreenTapGesture">
            <summary>Stub type of Leap.ScreenTapGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenTapGesture.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenTapGesture.#ctor(Leap.Gesture)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenTapGesture.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenTapGesture.Dispose">
            <summary>Sets the stub of ScreenTapGesture.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubScreenTapGesture.Dispose01">
            <summary>Sets the stub of ScreenTapGesture.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenTapGesture.InitializeStub">
            <summary>Initializes a new instance of type StubScreenTapGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubScreenTapGesture.ToString">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubScreenTapGesture.ToString01">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreenTapGesture.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreenTapGesture.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubScreenTapGesture.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubSwipeGesture">
            <summary>Stub type of Leap.SwipeGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubSwipeGesture.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubSwipeGesture.#ctor(Leap.Gesture)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubSwipeGesture.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubSwipeGesture.Dispose">
            <summary>Sets the stub of SwipeGesture.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubSwipeGesture.Dispose01">
            <summary>Sets the stub of SwipeGesture.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubSwipeGesture.InitializeStub">
            <summary>Initializes a new instance of type StubSwipeGesture</summary>
        </member>
        <member name="M:Leap.Fakes.StubSwipeGesture.ToString">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubSwipeGesture.ToString01">
            <summary>Sets the stub of Gesture.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubSwipeGesture.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubSwipeGesture.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubSwipeGesture.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubTool">
            <summary>Stub type of Leap.Tool</summary>
        </member>
        <member name="M:Leap.Fakes.StubTool.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubTool.#ctor(Leap.Pointable)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubTool.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubTool.Dispose">
            <summary>Sets the stub of Tool.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubTool.Dispose01">
            <summary>Sets the stub of Tool.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubTool.InitializeStub">
            <summary>Initializes a new instance of type StubTool</summary>
        </member>
        <member name="M:Leap.Fakes.StubTool.ToString">
            <summary>Sets the stub of Tool.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubTool.ToString01">
            <summary>Sets the stub of Tool.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubTool.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubTool.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubTool.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubToolList">
            <summary>Stub type of Leap.ToolList</summary>
        </member>
        <member name="M:Leap.Fakes.StubToolList.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubToolList.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubToolList.Dispose">
            <summary>Sets the stub of ToolList.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubToolList.Dispose01">
            <summary>Sets the stub of ToolList.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubToolList.InitializeStub">
            <summary>Initializes a new instance of type StubToolList</summary>
        </member>
        <member name="P:Leap.Fakes.StubToolList.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubToolList.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubToolList.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Leap.Fakes.StubVector">
            <summary>Stub type of Leap.Vector</summary>
        </member>
        <member name="M:Leap.Fakes.StubVector.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubVector.#ctor(Leap.Vector)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubVector.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubVector.#ctor(System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Leap.Fakes.StubVector.Dispose">
            <summary>Sets the stub of Vector.Dispose()</summary>
        </member>
        <member name="F:Leap.Fakes.StubVector.Dispose01">
            <summary>Sets the stub of Vector.Dispose()</summary>
        </member>
        <member name="M:Leap.Fakes.StubVector.InitializeStub">
            <summary>Initializes a new instance of type StubVector</summary>
        </member>
        <member name="M:Leap.Fakes.StubVector.ToString">
            <summary>Sets the stub of Vector.ToString()</summary>
        </member>
        <member name="F:Leap.Fakes.StubVector.ToString01">
            <summary>Sets the stub of Vector.ToString()</summary>
        </member>
        <member name="P:Leap.Fakes.StubVector.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Leap.Fakes.StubVector.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Leap.Fakes.StubVector.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
